//给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。
//请你将两个数相加，并以相同形式返回一个表示和的链表


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(0); // 创建一个虚拟头节点作为起点
        ListNode* current = dummy; // 当前节点指针
        int carry = 0; // 进位

        while (l1 || l2) {
            int sum = carry;
            if (l1) {
                sum += l1->val;
                l1 = l1->next;
            }
            if (l2) {
                sum += l2->val;
                l2 = l2->next;
            }
            carry = sum / 10; // 计算进位
            current->next = new ListNode(sum % 10); // 创建新节点存储相加结果的个位数
            current = current->next;
        }

        if (carry > 0) {
            current->next = new ListNode(carry); // 如果最高位有进位，创建新节点存储进位值
        }

        return dummy->next; // 返回虚拟头节点的下一个节点作为结果链表的起点
    }
};
