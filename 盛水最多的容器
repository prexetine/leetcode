//给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。

//找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

//返回容器可以储存的最大水量。


class Solution {
public:
    int maxArea(vector<int>& height) {
        int max_water = 0;
        int left = 0, right = height.size() - 1;
    
        while (left < right) {
            // 计算当前两条线段构成的容器的容量
            int h = min(height[left], height[right]);
            int w = right - left;
            int current_water = h * w;
        
            // 更新最大水量
            max_water = max(max_water, current_water);
        
            // 移动较短的线段，以寻找可能的更大容器
            if (height[left] < height[right]) {
               left++;
            }else {
                right--;
            }
        }
        return max_water;
    }
};
